/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.alibaba.dts.formats.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Integer extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8676388679064639164L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Integer\",\"namespace\":\"com.alibaba.dts.formats.avro\",\"fields\":[{\"name\":\"precision\",\"type\":\"int\"},{\"name\":\"value\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int precision;
  @Deprecated public java.lang.CharSequence value;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Integer() {}

  /**
   * All-args constructor.
   */
  public Integer(java.lang.Integer precision, java.lang.CharSequence value) {
    this.precision = precision;
    this.value = value;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return precision;
    case 1: return value;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: precision = (java.lang.Integer)value$; break;
    case 1: value = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'precision' field.
   */
  public java.lang.Integer getPrecision() {
    return precision;
  }

  /**
   * Sets the value of the 'precision' field.
   * @param value the value to set.
   */
  public void setPrecision(java.lang.Integer value) {
    this.precision = value;
  }

  /**
   * Gets the value of the 'value' field.
   */
  public java.lang.CharSequence getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(java.lang.CharSequence value) {
    this.value = value;
  }

  /**
   * Creates a new Integer RecordBuilder.
   * @return A new Integer RecordBuilder
   */
  public static com.alibaba.dts.formats.avro.Integer.Builder newBuilder() {
    return new com.alibaba.dts.formats.avro.Integer.Builder();
  }
  
  /**
   * Creates a new Integer RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Integer RecordBuilder
   */
  public static com.alibaba.dts.formats.avro.Integer.Builder newBuilder(com.alibaba.dts.formats.avro.Integer.Builder other) {
    return new com.alibaba.dts.formats.avro.Integer.Builder(other);
  }
  
  /**
   * Creates a new Integer RecordBuilder by copying an existing Integer instance.
   * @param other The existing instance to copy.
   * @return A new Integer RecordBuilder
   */
  public static com.alibaba.dts.formats.avro.Integer.Builder newBuilder(com.alibaba.dts.formats.avro.Integer other) {
    return new com.alibaba.dts.formats.avro.Integer.Builder(other);
  }
  
  /**
   * RecordBuilder for Integer instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Integer>
    implements org.apache.avro.data.RecordBuilder<Integer> {

    private int precision;
    private java.lang.CharSequence value;

    /** Creates a new Builder */
    private Builder() {
      super(com.alibaba.dts.formats.avro.Integer.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.alibaba.dts.formats.avro.Integer.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.precision)) {
        this.precision = data().deepCopy(fields()[0].schema(), other.precision);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.value)) {
        this.value = data().deepCopy(fields()[1].schema(), other.value);
        fieldSetFlags()[1] = true;
      }
    }
    
    /**
     * Creates a Builder by copying an existing Integer instance
     * @param other The existing instance to copy.
     */
    private Builder(com.alibaba.dts.formats.avro.Integer other) {
            super(com.alibaba.dts.formats.avro.Integer.SCHEMA$);
      if (isValidValue(fields()[0], other.precision)) {
        this.precision = data().deepCopy(fields()[0].schema(), other.precision);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.value)) {
        this.value = data().deepCopy(fields()[1].schema(), other.value);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'precision' field.
      * @return The value.
      */
    public java.lang.Integer getPrecision() {
      return precision;
    }

    /**
      * Sets the value of the 'precision' field.
      * @param value The value of 'precision'.
      * @return This builder.
      */
    public com.alibaba.dts.formats.avro.Integer.Builder setPrecision(int value) {
      validate(fields()[0], value);
      this.precision = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'precision' field has been set.
      * @return True if the 'precision' field has been set, false otherwise.
      */
    public boolean hasPrecision() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'precision' field.
      * @return This builder.
      */
    public com.alibaba.dts.formats.avro.Integer.Builder clearPrecision() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * @return The value.
      */
    public java.lang.CharSequence getValue() {
      return value;
    }

    /**
      * Sets the value of the 'value' field.
      * @param value The value of 'value'.
      * @return This builder.
      */
    public com.alibaba.dts.formats.avro.Integer.Builder setValue(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.value = value;
      fieldSetFlags()[1] = true;
      return this; 
    }

    /**
      * Checks whether the 'value' field has been set.
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'value' field.
      * @return This builder.
      */
    public com.alibaba.dts.formats.avro.Integer.Builder clearValue() {
      value = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Integer build() {
      try {
        Integer record = new Integer();
        record.precision = fieldSetFlags()[0] ? this.precision : (java.lang.Integer) defaultValue(fields()[0]);
        record.value = fieldSetFlags()[1] ? this.value : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}
